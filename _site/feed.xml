<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>고개의 블로그</title>
    <description>고개의 개발 블로그입니다.
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 21 Jun 2023 17:51:17 +0900</pubDate>
    <lastBuildDate>Wed, 21 Jun 2023 17:51:17 +0900</lastBuildDate>
    <generator>Jekyll v3.9.3</generator>
    
      <item>
        <title>[Java] 자바란?</title>
        <description>&lt;h1 id=&quot;자바&quot;&gt;자바&lt;/h1&gt;

&lt;h3 id=&quot;자바란&quot;&gt;자바란?&lt;/h3&gt;

&lt;p&gt;썬 마이크로시스템즈에서 1995년에 개발한 객체 지향 프로그래밍 언어이다.&lt;/p&gt;

&lt;h3 id=&quot;자바-특징&quot;&gt;자바 특징&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;자바는 클래스 기반의 객체 지향 프로그래밍 언어입니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;자바는 JVM(Java Virtual Machine)이 설치된 모든 플랫폼에서 실행할 수 있는 바이트코드로 컴파일할 수 있습니다. 이러한 플랫폼 독립성은 Java 응용 프로그램을 다양한 운영체제 및 하드웨어 아키텍처에서 이식할 수 있도록 합니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;자바는 더 이상 사용되지 않는 프로그램의 메모리를 자동으로 해제합니다. 따라서 따로 메모리를 관리하지 않아도 되므로, 프로그래밍을 쉽게 할 수 있도록 도와줍니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;객체-지향-프로그래밍oop&quot;&gt;객체 지향 프로그래밍(OOP)&lt;/h3&gt;

&lt;p&gt;객체 지향 프로그래밍은 데이터와 코드를 결합하는 객체 개념을 중심으로 소프트웨어 설계를 구성하고 구조화하는 데 중점을 둔 프로그래밍 패러다임입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 프로그램이 핵심 원칙&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;캡슐화(Encapsulation): 객체는 데이터와 메서드를 함께 캡슐화하여 내부 세부 정보를 숨기고 다른 객체와의 상호 작용을 위한 명확한 인터페이스를 제공합니다.&lt;br /&gt;
자바에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;public&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;protected&lt;/code&gt; 및 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;default&lt;/code&gt; 와 같은 접근 제한자를 통해 필요한 정보만 외부로 노출시킬 수 있습니다. 또 다른 방법으로는 모든 속성값을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;private&lt;/code&gt; 접근 제한자로 선언을 하고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getter/setter&lt;/code&gt; 메서드를 통해 선택적으로 외부에서의 접근을 허용할 수 있습니다.
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;상속(Inheritance): 상속을 통해 객체는 다른 객체의 속성과 동작을 상속하여 계층적 관계를 형성할 수 있습니다. 상속을 통해 객체는 기존 객체의 기능을 재사용하고 확장하여 코드 재사용을 촉진합니다.&lt;br /&gt;
자바에서 “eat()” 메서드가 있는 “Animal” 클래스를 정의합니다. 그리고 “Dog”라는 클래스는 “Animal” 클래스를 상속받아 “eat()” 메서드를 재사용하여 중복 코드를 줄여 코드를 간결하게 할 수 있습니다.
&lt;br /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;다향성(Polymorphism): 다형성을 사용하면 다른 유형의 객체를 공통 상위 클래스의 객체로 취급할 수 있습니다. 이를 통해 코드를 일반적이고 유연한 방식으로 작성할 수 있습니다. 객체를 상호 교환하여 사용할 수 있으므로 코드 재사용 및 코드를 유연하게 사용할 수 있는 방법이 제공됩니다.&lt;br /&gt;
자바에서 다향성은 오버라이딩과 오버로딩이 있습니다. 오버라이딩는 부모 클래스의 메소드를 재정의한다고 생각하면 됩니다. 만약 “Dog”, “Cat” 클래스가 “makeSound()”라는 메서드를 가지고 있는 “Animal” 클래스를 상속받는다고 하겠습니다. 그리고 “Dog” 클래스는 “makeSound()” 메서드의 구현부를 “멍멍 소리를 내다”로 재정의 할 수 있고, “Cat” 클래스는 “냐옹 소리를 내다”로 재정의 할 수 있습니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;추상화(Abstraction): 객체의 공통적인 속성과 기능을 추출하여 정의하는 것입니다. 추상화를 통해 프로그래머는 구현 세부 정보를 지정하지 않고 객체의 공통 속성 및 동작을 정의하는 추상 클래스 또는 인터페이스를 만들 수 있습니다.&lt;br /&gt;
자바에서 “calculateArea()” 메소드가 있는 “Shape” 추상 클래스가 정의되어 있다면, “Rectagle” 클래스는 “Shape” 클래스를 확장하여 “calculateArea()” 메서드의 구현부를 “가로x세로”와 같이 자체 구현할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 21 Jun 2023 17:50:00 +0900</pubDate>
        <link>http://localhost:4000/java/2023/06/21/java-overview.html</link>
        <guid isPermaLink="true">http://localhost:4000/java/2023/06/21/java-overview.html</guid>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>[JavaScript] javascript란?</title>
        <description>&lt;h1 id=&quot;javascript&quot;&gt;JavaScript&lt;/h1&gt;

&lt;h3 id=&quot;javascript란-무엇인가&quot;&gt;JavaScript란 무엇인가?&lt;/h3&gt;

&lt;p&gt;자바스크립트는 웹 페이지에 생동감과 복잡한 기능을 구현할 수 있도록 하는 스크립팅 언어 또는 프로그래밍 언어입니다.&lt;/p&gt;

&lt;p&gt;처음에는 웹 브라우저에서 클라이언트 측 스크립팅 기능을 제공하기 위해 개발되었지만 시간이 지남에 따라 브라우저뿐만 아니라 서버, 데스크톱 애플리케이션 및 모바일 앱 개발을 할 수 있게 되었습니다.&lt;/p&gt;

&lt;h3 id=&quot;자바스크립트가-브라우저에서-할-수-있는-일&quot;&gt;자바스크립트가 브라우저에서 할 수 있는 일&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;자바스크립트가 브라우저에서 할 수 있는 일&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;웹 페이지의 DOM(Document Object Model) API를 통해 HTML과 CSS를 동적으로 수정, 사용자 인터페이스를 업데이트할 수 있습니다. 이를 통해 양식 유효성 검사, 이미지 슬라이더, 드롭 다운 메뉴 등과 같은 기능을 만들 수 있습니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;마우스 클릭이나 포인터의 움직임, 키보드 키 눌림 등과 같은 이벤트를 처리할 수 있습니다. 이를 통해 웹 페이지의 특정 요소에 이벤트 핸들러를 연결하여 특정 이벤트가 발생할 때 페이지가 응답하는 방식 등을 구현할 수 있습니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;네트워크를 통해 원격 서버에 요청을 보내거나, 파일 다운로드, 업로드 등을 할 수 있습니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;로컬 스토리지 및 세션 스토리지 등을 이용하여 클라이언트 측에 데이터 저장할 수 있습니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;웹-페이지에-자바스크립트-넣기&quot;&gt;웹 페이지에 자바스크립트 넣기&lt;/h3&gt;

&lt;p&gt;웹 페이지에 자바스크립트를 넣는 방식은 내부, 외부 방식이 있습니다.&lt;/p&gt;

&lt;p&gt;내부 방식은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를 사용해서 HTML 파일 내 자바스크립트 코드를 직접 삽입하는 방법입니다.
HTML 문서의 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; 태그 내에 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그를 배치하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;외부 방식은 확장자가 .js인 자바스립트 파일을 만들어. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그의 src 속성을 사용하여 파일을 참조하는 방식입니다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// hello.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello Word&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;이벤트-처리&quot;&gt;이벤트 처리&lt;/h3&gt;

&lt;p&gt;두 가지 방법으로 자바스크립트를 이용하여 이벤트를 처리 해보겠습니다.&lt;/p&gt;

&lt;p&gt;예시로 HTML &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 요소에 클릭 이벤트가 발생했을 때 콘솔 창에 “Hello World”를 출력해보겠습니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;인라인으로 처리하기 (권장하지 않음)&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clickBtn()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;눌러&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;addEventListener 사용하기&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&amp;gt;&lt;/span&gt;눌러&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buttons&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buttons&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clickBtn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hello World&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;1번과 같이 HTML 태그 요소 안에 자바스크립트 코드를 사용하는 방법은 권장하지 않습니다. 왜냐하면 같은 기능이 필요한 버튼이 있을 때 모든 버튼마다 일일히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onclick=&quot;clickBtn()&quot;&lt;/code&gt;를 추가해야 하는 것은 비효율적이기 때문입니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Jun 2023 03:15:00 +0900</pubDate>
        <link>http://localhost:4000/javascript/2023/06/21/javascript-overview.html</link>
        <guid isPermaLink="true">http://localhost:4000/javascript/2023/06/21/javascript-overview.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>[Spring Boot] Spring Boot 시작하기</title>
        <description>&lt;h1 id=&quot;spring-boot&quot;&gt;Spring Boot&lt;/h1&gt;

&lt;h2 id=&quot;spring-boot를-사용하는-이유&quot;&gt;Spring Boot를 사용하는 이유&lt;/h2&gt;

&lt;p&gt;스프링 부트는 스프링 프레임워크에 비해 설정이 간단하며 서버를 내장하고 있어 애플리케이션을 독립적으로 사용할 수 있고 외부 서버에 배포할 필요가 없습니다.&lt;/p&gt;

&lt;h2 id=&quot;spring-boot-시작하기&quot;&gt;Spring Boot 시작하기&lt;/h2&gt;

&lt;h3 id=&quot;1-자바-설치-확인하기&quot;&gt;1. 자바 설치 확인하기&lt;/h3&gt;

&lt;p&gt;터미널을 열고 다음 명령어를 실행해서 Java가 설치되어 있는지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java -version
openjdk version &quot;17.0.4.1&quot; 2022-08-12 LTS
OpenJDK Runtime Environment (build 17.0.4.1+1-LTS)
OpenJDK 64-Bit Server VM (build 17.0.4.1+1-LTS, mixed mode, sharing)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-스프링-프로젝트-생성&quot;&gt;2. 스프링 프로젝트 생성&lt;/h3&gt;

&lt;p&gt;먼저 spring initializr를 이용하여 스프링 부트 프로젝트를 만듭니다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://start.spring.io/&quot;&gt;https://start.spring.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;링크에 접속해 아래와 같이 설정을 한 후 GENERATE를 누릅니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Project
    &lt;ul&gt;
      &lt;li&gt;gradle - Groovy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Language
    &lt;ul&gt;
      &lt;li&gt;Java&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Spring Boot
    &lt;ul&gt;
      &lt;li&gt;3.1.0&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Packaging
    &lt;ul&gt;
      &lt;li&gt;Jar&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Java
    &lt;ul&gt;
      &lt;li&gt;17&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dependencies
    &lt;ul&gt;
      &lt;li&gt;Spring Web&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;GENERATE를 눌러 압축 파일이 생성되었다면 압축을 풀어줍니다.&lt;/p&gt;

&lt;p&gt;압축을 풀었다면 vscode, intellij community와 같은 개발 환경에서 프로젝트를 열어줍니다.&lt;/p&gt;

&lt;h3 id=&quot;3-hello-world-출력하기&quot;&gt;3. Hello World 출력하기&lt;/h3&gt;

&lt;p&gt;프로젝트가 정상적으로 열렸다면 src/main/java/…/DemoApplication.java 파일을 열어 다음과 같이 수정합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RestController&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DemoApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DemoApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같이 수정하였으면 애플리케이션을 실행합니다. 실행 후 브라우저에 접속하여 url 입력창에 “http://localhost:8080” 을 입력하여 “Hello World!” 문구가 보인다면 성공입니다.&lt;/p&gt;

&lt;p&gt;@RestController는 여기로 HTTP 요청을 처리하고 반환 데이터는 Json 형태로 반환한다는 뜻으로 생각하면 됩니다. @RequstMapping은 특정 url이나 url 패턴을 이 메서드에 매핑한다는 뜻입니다.&lt;/p&gt;

&lt;p&gt;스프링 부트를 사용하면 이와 같이 따로 서버를 설치 및 설정하지도 않고 간단한 설정만으로 웹 애플리케이션을 만들고 실행할 수 있는 장점이 있습니다.&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Jun 2023 01:45:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2023/06/21/boot-getting-started.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2023/06/21/boot-getting-started.html</guid>
        
        <category>boot</category>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>[Spring Framework] Spring Framework란?</title>
        <description>&lt;h1 id=&quot;spring-framework란&quot;&gt;Spring Framework란?&lt;/h1&gt;

&lt;h2 id=&quot;spring-framework란-1&quot;&gt;Spring Framework란?&lt;/h2&gt;

&lt;p&gt;스프링은 자바 프로그래밍을 더 빠르고 쉽고 안전하게 만들기 위한 프레임워크입니다.&lt;/p&gt;

&lt;h2 id=&quot;핵심-개념&quot;&gt;핵심 개념&lt;/h2&gt;

&lt;h3 id=&quot;iocinversion-of-control-컨테이너&quot;&gt;IoC(Inversion of Control) 컨테이너&lt;/h3&gt;

&lt;p&gt;IoC 컨테이너는 Bean의 인스턴스화, 구성 및 조립을 담당합니다.&lt;/p&gt;

&lt;p&gt;스프링의 IoC 컨테이너는 애플리케이션이 시작되면 XML, 어노테이션 또는 Java 클래스의 메타데이터를 활용하여 객체를 생성, 인스턴스화 및 의존성 주입을 처리하여 개발자가 명시적으로 관리하지 않도록 합니다.&lt;/p&gt;

&lt;h3 id=&quot;didependency-injection-의존성-주입&quot;&gt;DI(Dependency Injection, 의존성 주입)&lt;/h3&gt;

&lt;p&gt;DI란 사용할 객체를 직접 생성하지 않고 외부 컨테이너가 생성한 객체를 주입받아 사용하는 방식입니다.&lt;/p&gt;

&lt;p&gt;스프링 프레임워크에서는 세 가지 방법으로 의존성을 주입합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;생성자를 통한 의존성 주입&lt;/li&gt;
  &lt;li&gt;세터 메서드를 통한 의존성 주입&lt;/li&gt;
  &lt;li&gt;필드에 직접 의존성 주입&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DI의 이점 중 하나는 의존성 관리를 IoC 컨테이너에 위임함으로써 객체는 구체적인 구현이 아닌 추상화에 의존하여 구성 요소 간의 느슨한 결합이 촉진됩니다. 이를 통해 개별 구성 요소의 격리된 테스트가 가능하므로 단위 테스트를 보다 쉽게 작성할 수 있습니다.&lt;/p&gt;

&lt;h3 id=&quot;aopaspect-oriented-programming&quot;&gt;AOP(Aspect-Oriented Programming)&lt;/h3&gt;

&lt;p&gt;AOP는 애플리케이션의 핵심 비즈니스 논리에서 횡단 관심사(공통 관심사)를 분리하기 위한 프로그래밍 패러다임입니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;AOP의 핵심 개념&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aspect: 공통 관심사를 모듈화 한 것으로 일반적으로 애플리케이션의 여러 객체 또는 모듈에 적용되어야 하는 특정 동작 또는 작업을 정의합니다.&lt;/li&gt;
  &lt;li&gt;Join Point: 조인 포인트는 Aspect가 적용 될 수 있는 특정 포인트를 나타냅니다. 조인 포인트의 예로는 메서드 호출, 예외 처리, 제어 흐름의 특정 지점이 있습니다.&lt;/li&gt;
  &lt;li&gt;Advice: 조인 포인트에 도달했을 때 발생해야 하는 일을 정의합니다. 일반적인 유형의 어드바이스는 “before”, “after”, “around”, “after-throwing” 그리고 “after-returning”이 있습니다.&lt;/li&gt;
  &lt;li&gt;Pointcut: 애플리케이션에서 어떤 조인 포인트를 가로채고 관련 어드바이스를 적용해야 하는지 결정하는 표현식입니다. 이를 통해 개발자는 Aspect의 정확한 위치 또는 조건을 지정할 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;주요-기능&quot;&gt;주요 기능&lt;/h2&gt;

&lt;h3 id=&quot;스프링-mvc&quot;&gt;스프링 MVC&lt;/h3&gt;

&lt;p&gt;Spring MVC(Model-View-Controller)는 웹 애플리케이션 구축에 대한 구조화된 접근 방식을 제공하는 웹 프레임워크입니다. Spring MVC는 웹 개발을 단순화하기 위한 다양한 기능을 제공합니다. 컨트롤러가 요청 처리를 위해 특정 URL 또는 URL 패턴을 메서드에 매핑할 수 있는 요청 매핑 기능 등이 있습니다. MVC(Model-View-Controller) 아키텍처 패턴을 따르며 애플리케이션을 세 가지 주요 구성 요소(모델, 뷰, 컨트롤러)로 구분합니다.&lt;/p&gt;

&lt;p&gt;모델은 애플리케이션의 데이터 및 비즈니스 로직을 나타냅니다. 애플리케이션의 데이터, 상태 및 동작을 캡슐화합니다. Spring MVC에서 모델은 일반적으로 애플리케이션 데이터를 보유하고 데이터베이스 또는 데이터 소스와 상호 작용하는 Java클래스 또는 POJO(Plain Old Java Objects)로 구성됩니다.&lt;/p&gt;

&lt;p&gt;뷰는 사용자에게 데이터를 제공하는 역할을 합니다. 애플리케이션 사용자 인터페이스의 시각적 표현을 정의합니다. Spring MVC에서 뷰는 JSP, Thymeleaf 와 같은 템플릿 기술을 사용하여 구현됩니다. 뷰는 클라이언트로 다시 전송되는 응답을 렌더링하는 역할을 합니다.&lt;/p&gt;

&lt;p&gt;컨트롤러는 모델과 뷰 사이의 중개자 역할을 합니다. 사용자 요청을 수신 및 처리하고, 필요한 처리를 수행하고, 응답을 생성하는 데 사용할 적절한 모델과 뷰를 결정합니다. Spring MVC의 컨트롤러는 Java 클래스로 구현되며 HTTP 요청 처리, 양식 데이터 처리, 비즈니스 로직 호출 및 뷰에서 렌더링할 모델 준비를 담당합니다.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jun 2023 16:40:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2023/06/20/framework01.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2023/06/20/framework01.html</guid>
        
        <category>framework</category>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>[Spring Security] security</title>
        <description>
</description>
        <pubDate>Mon, 19 Jun 2023 11:45:00 +0900</pubDate>
        <link>http://localhost:4000/spring/2023/06/19/security.html</link>
        <guid isPermaLink="true">http://localhost:4000/spring/2023/06/19/security.html</guid>
        
        <category>security</category>
        
        
        <category>spring</category>
        
      </item>
    
      <item>
        <title>[MySQL] MySQL</title>
        <description>&lt;p&gt;Mysql&lt;/p&gt;

&lt;p&gt;234&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Jun 2023 03:00:00 +0900</pubDate>
        <link>http://localhost:4000/db/2023/06/19/mysql.html</link>
        <guid isPermaLink="true">http://localhost:4000/db/2023/06/19/mysql.html</guid>
        
        <category>mysql</category>
        
        
        <category>db</category>
        
      </item>
    
      <item>
        <title>etc Test</title>
        <description>
</description>
        <pubDate>Mon, 19 Jun 2023 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/etc/2023/06/19/setting-start.html</link>
        <guid isPermaLink="true">http://localhost:4000/etc/2023/06/19/setting-start.html</guid>
        
        <category>etc</category>
        
        
        <category>etc</category>
        
      </item>
    
  </channel>
</rss>
